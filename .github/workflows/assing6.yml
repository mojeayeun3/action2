name: Assign PR Reviewer

on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get last assigned reviewer
        id: get_last_reviewer
        run: |
          LAST_REVIEWER=$(gh variable get LAST_ASSIGNED_REVIEWER || echo "")
          echo "LAST_REVIEWER=$LAST_REVIEWER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}

      - name: Assign Reviewer
        id: assign_reviewer
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          CONFIG_FILE=.github/reviewer-config.json
          
          # Read the reviewer configuration
          REVIEWERS=($(jq -r '.reviewers[]' $CONFIG_FILE))
          
          # Get the last assigned reviewer
          LAST_REVIEWER="${{ steps.get_last_reviewer.outputs.LAST_REVIEWER }}"
          
          # Find the next eligible reviewer
          NEXT_REVIEWER=""
          if [[ -z "$LAST_REVIEWER" ]]; then
            # If LAST_ASSIGNED_REVIEWER is empty, start from the beginning of the list
            for reviewer in "${REVIEWERS[@]}"; do
              if [[ "$reviewer" != "$PR_AUTHOR" ]]; then
                NEXT_REVIEWER="$reviewer"
                break
              fi
            done
          else
            # Find the next eligible reviewer after the last assigned one
            for i in "${!REVIEWERS[@]}"; do
              if [[ "${REVIEWERS[$i]}" == "$LAST_REVIEWER" ]]; then
                # Start looking for the next reviewer from here
                for j in $(seq $(( (i+1) % ${#REVIEWERS[@]} )) $((${#REVIEWERS[@]}-1)) 0 $i); do
                  if [[ "${REVIEWERS[$j]}" != "$PR_AUTHOR" ]]; then
                    NEXT_REVIEWER="${REVIEWERS[$j]}"
                    break 2
                  fi
                done
              fi
            done
          fi
          
          # If still no reviewer found, exit
          if [[ -z "$NEXT_REVIEWER" ]]; then
            echo "Error: No eligible reviewer found."
            exit 1
          fi
          
          # Get the current PR number
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          
          # Assign the reviewer
          gh pr edit $PR_NUMBER --add-reviewer $NEXT_REVIEWER
          
          echo "Assigned reviewer $NEXT_REVIEWER to PR #$PR_NUMBER"
          echo "ASSIGNED_REVIEWER=$NEXT_REVIEWER" >> $GITHUB_OUTPUT

      - name: Save assigned reviewer
        if: steps.assign_reviewer.outputs.ASSIGNED_REVIEWER != ''
        run: |
          gh variable set LAST_ASSIGNED_REVIEWER ${{ steps.assign_reviewer.outputs.ASSIGNED_REVIEWER }}
        env:
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}
